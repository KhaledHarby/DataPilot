using System.Text.Json;
using DataPilot.Web.Providers.Mcp;
using DataPilot.Web.Providers.Llm;

namespace DataPilot.Web.Services;

/// <summary>
/// MCP Service for integrating MCP functionality with DataPilot
/// </summary>
public class McpService
{
    private readonly IMcpServer _mcpServer;
    private readonly IMcpClientFactory _mcpClientFactory;
    private readonly LlmClientFactory _llmFactory;
    private readonly ILogger<McpService> _logger;

    public McpService(
        IMcpServer mcpServer,
        IMcpClientFactory mcpClientFactory,
        LlmClientFactory llmFactory,
        ILogger<McpService> logger)
    {
        _mcpServer = mcpServer;
        _mcpClientFactory = mcpClientFactory;
        _llmFactory = llmFactory;
        _logger = logger;
    }

    /// <summary>
    /// Get enhanced context using MCP resources
    /// </summary>
    public async Task<string> GetEnhancedContextAsync(string connectionId, string? customContext = null)
    {
        try
        {
            var contextBuilder = new List<string>();

            // Get schema information via MCP
            var schemaResource = await _mcpServer.ReadResourceAsync(new McpReadResourceMessage
            {
                Uri = "datapilot://schema"
            });

            if (schemaResource.Contents.ValueKind == JsonValueKind.Array)
            {
                var connections = JsonSerializer.Deserialize<List<dynamic>>(schemaResource.Contents.GetRawText());
                var connection = connections?.FirstOrDefault(c => c.GetProperty("connectionId").GetString() == connectionId);
                
                if (connection != null)
                {
                    contextBuilder.Add("## DATABASE SCHEMA");
                    contextBuilder.Add(JsonSerializer.Serialize(connection, new JsonSerializerOptions { WriteIndented = true }));
                }
            }

            // Get connection metadata
            var connectionsResource = await _mcpServer.ReadResourceAsync(new McpReadResourceMessage
            {
                Uri = "datapilot://connections"
            });

            if (connectionsResource.Contents.ValueKind == JsonValueKind.Array)
            {
                var connections = JsonSerializer.Deserialize<List<dynamic>>(connectionsResource.Contents.GetRawText());
                var connection = connections?.FirstOrDefault(c => c.GetProperty("id").GetString() == connectionId);
                
                if (connection != null)
                {
                    contextBuilder.Add("## CONNECTION INFO");
                    contextBuilder.Add(JsonSerializer.Serialize(connection, new JsonSerializerOptions { WriteIndented = true }));
                }
            }

            // Add custom context if provided
            if (!string.IsNullOrEmpty(customContext))
            {
                contextBuilder.Add("## CUSTOM CONTEXT");
                contextBuilder.Add(customContext);
            }

            return string.Join("\n\n", contextBuilder);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error getting enhanced context for connection {ConnectionId}", connectionId);
            return customContext ?? "";
        }
    }

    /// <summary>
    /// Execute query with MCP-enhanced context
    /// </summary>
    public async Task<dynamic> ExecuteQueryWithMcpContextAsync(
        string connectionId, 
        string naturalLanguageQuery, 
        string? customContext = null,
        LlmProvider llmProvider = LlmProvider.OpenAI)
    {
        try
        {
            // Get enhanced context
            var enhancedContext = await GetEnhancedContextAsync(connectionId, customContext);

            // Call MCP analyze_query tool
            var analyzeResponse = await _mcpServer.CallToolAsync(new McpCallToolMessage
            {
                Name = "analyze_query",
                Arguments = JsonSerializer.SerializeToElement(new
                {
                    connectionId,
                    naturalLanguageQuery,
                    context = enhancedContext
                })
            });

            if (analyzeResponse.IsError)
            {
                throw new Exception($"MCP analysis failed: {analyzeResponse.Error}");
            }

            // Extract suggested SQL from the analysis
            var analysis = JsonSerializer.Deserialize<dynamic>(analyzeResponse.Result.GetRawText());
            var suggestedSql = analysis?.GetProperty("suggestedSql")?.GetString();

            if (string.IsNullOrEmpty(suggestedSql))
            {
                throw new Exception("No SQL suggestion generated by MCP analysis");
            }

            // Execute the suggested SQL
            var executeResponse = await _mcpServer.CallToolAsync(new McpCallToolMessage
            {
                Name = "execute_query",
                Arguments = JsonSerializer.SerializeToElement(new
                {
                    connectionId,
                    sql = suggestedSql,
                    maxRows = 100
                })
            });

            if (executeResponse.IsError)
            {
                throw new Exception($"MCP query execution failed: {executeResponse.Error}");
            }

            return JsonSerializer.Deserialize<dynamic>(executeResponse.Result.GetRawText());
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error executing query with MCP context for connection {ConnectionId}", connectionId);
            throw;
        }
    }

    /// <summary>
    /// Get metadata for tables and columns
    /// </summary>
    public async Task<dynamic> GetMetadataAsync(string connectionId, string? tableName = null)
    {
        try
        {
            var response = await _mcpServer.CallToolAsync(new McpCallToolMessage
            {
                Name = "get_metadata",
                Arguments = JsonSerializer.SerializeToElement(new
                {
                    connectionId,
                    tableName
                })
            });

            if (response.IsError)
            {
                throw new Exception($"MCP metadata retrieval failed: {response.Error}");
            }

            return JsonSerializer.Deserialize<dynamic>(response.Result.GetRawText());
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error getting metadata for connection {ConnectionId}", connectionId);
            throw;
        }
    }

    /// <summary>
    /// Connect to external MCP server and get its capabilities
    /// </summary>
    public async Task<dynamic> ConnectToExternalServerAsync(string serverUrl, string? clientName = null, string? clientVersion = null)
    {
        try
        {
            var client = _mcpClientFactory.CreateClient(serverUrl);
            
            var clientInfo = new McpClientInfo
            {
                Name = clientName ?? "DataPilot",
                Version = clientVersion ?? "1.0.0"
            };

            var response = await client.InitializeAsync(serverUrl, clientInfo);
            
            return new
            {
                success = true,
                serverInfo = response.ServerInfo,
                capabilities = response.Capabilities
            };
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error connecting to external MCP server {ServerUrl}", serverUrl);
            return new
            {
                success = false,
                error = ex.Message
            };
        }
    }

    /// <summary>
    /// Call tool on external MCP server
    /// </summary>
    public async Task<dynamic> CallExternalToolAsync(string serverUrl, string toolName, object arguments)
    {
        try
        {
            var client = _mcpClientFactory.CreateClient(serverUrl);
            
            // Initialize client
            var clientInfo = new McpClientInfo
            {
                Name = "DataPilot",
                Version = "1.0.0"
            };
            
            await client.InitializeAsync(serverUrl, clientInfo);
            
            // Call the tool
            var argumentsElement = JsonSerializer.SerializeToElement(arguments);
            var response = await client.CallToolAsync(toolName, argumentsElement);
            
            return JsonSerializer.Deserialize<dynamic>(response.Result.GetRawText());
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error calling external tool {ToolName} on {ServerUrl}", toolName, serverUrl);
            throw;
        }
    }

    /// <summary>
    /// Get available MCP resources
    /// </summary>
    public async Task<List<McpResource>> GetAvailableResourcesAsync()
    {
        try
        {
            var response = await _mcpServer.ListResourcesAsync(new McpListResourcesMessage());
            return response.Resources;
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error getting available MCP resources");
            return new List<McpResource>();
        }
    }

    /// <summary>
    /// Get available MCP tools
    /// </summary>
    public async Task<List<McpTool>> GetAvailableToolsAsync()
    {
        try
        {
            var response = await _mcpServer.ListToolsAsync(new McpListToolsMessage());
            return response.Tools;
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error getting available MCP tools");
            return new List<McpTool>();
        }
    }
}
